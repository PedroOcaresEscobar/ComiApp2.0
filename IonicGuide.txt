1-Este seria el comando principal para instalar ionic "npm install -g @ionic/cli" , 
estos primeros pasos serán un resumen de lo que haremos para crear nuestra aplicación paso a paso.
La idea es solo general el proyecto a través de la documentación oficial de ionic angular V7.
https://ionicframework.com/docs/v7/angular/your-first-app


2-Generamos un proyecto genérico con TABS, incluye 3 y estos los trabajaremos para las diferentes vistas, Home - ComiMap - Recetas

3-Con el comando "ionic generate", nos despliega la opción de elegir crear una pagina, un componente, un servicio, etc. en este caso generamos 3 page, (Home - ComiMap - Recetas).
Luego Reemplazamos las rutas de nuestra Page genérica tabs-routing.module.ts con nuestras nuevas paginas, luego debemos reemplazar ademas nuestras rutas en tabs.page.html, ya 
también tendrán las rutas genéricas de tab1, tab2, tab3.

4-Ahora trabajare en el page ComiMaps para lo cual necesitare instalar las dependencias de la libreria que utilizare,el cual sera mapBox, a través del comando "npm install mapbox-gl"
la documentación necesaria para instalar las dependencias de mapbox es la oficial y la siguiente https://docs.mapbox.com/mapbox-gl-js/guides/install/

5-La documentación oficial, es de JS Vanilla, nosotros estamos trabajando con TS, por lo tanto deberemos cambiar un poco la sintaxis de lo que nos entrega,
este código es el básico que se entrega en la documentación oficial.
En nuestro archivo comi-maps.page.ts en nuestro ciclo ngOnInit usaremos el código básico:
código de ejemplo:	

    mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN'; <-Linea 1
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        center: [-74.5, 40], // starting position [lng, lat]. Note that lat must be set between -90 and 90
        zoom: 9 // starting zoom
    });

, la modificación por ahora seria en mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';, ya que como estamos trabajando con ts, nos pide que indiquemos que tipo de mapboxgl
por ahora lo dejaremos como "as any", ya que estamos solo tomando el ejemplo para empezar a personalizar nuestro mapa.
la linea finalmente quedaría como (mapboxgl as any). Además para agregar una protección y modularidad en nuestro accessToken configuraremos nuestra variable de entorno "environment".
con la siguente linea:
mapbox:{
    accessToken:'tu token"
}
ahora nuestra Linea 1 del código básico (mapboxgl as any).accesToken = environment.mapbox.accesToken; <-Linea 1
asi nuestro token único y personal no queda a la vista.No obstante a esto debería crear un archivo .env para guardar el token, pero como debe analizarlo el profesor
quedara expuesto igual por ahora.
--------------------En mi mente pienso que debería crear un servicio para consumir la API de mapboxgl y luego importarlo en el modulo de comi-map.page.module.ts
 y asi hacerlo mas modular.----------------------------

6-En este paso debo seguir leyendo la documentación para personalizar:
-1) Hacer que según la ubicación del dispositivo se establezcan la latitud y longitud.
-2) Agregar iconos personalizados.
-3)  Mostrar Restaurantes cercanos.


-1)Para hacer que el map se ubique según nuestra geolocalización, usaremos una api de geolocalización de javascript, la documentación que revisé
esta disponible en este link https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API
en este nos entrega un código básico el cual debemos adaptar:
navigator.geolocation.getCurrentPosition((position) => {
  doSomething(position.coords.latitude, position.coords.longitude);
});

bien de esto tomaremos la el objeto navigator.geolocation la cual nos proporciona el método getCurrentPosition del cual obtenemos la ubicación actual y 
llama a una función callback con los datos obtenidos.
. Nos quedaremos entonces con las siguiente información:
navigator.geolocation.getCurrentPosition((posición) => {})

bueno getCurrentPosition nos devuelve la ubicación en este caso laa llamaremos posición y este nos entregara posición.coords.latitude y position.coords.longitude
entonces usamos function arrow para llamar al método de clase de nuestro comi-maps.page.ts y entregamos
 los parametros => {this.iniciarMaps( posición.coords.latitude,position.coords.longitude)}
le entregamos estos props a nuestro método de clase que definimos previamente iniciarMaps(lat:number,lon:number)
y dentro de nuestra método iniciarMaps inicializamos las variables obtenidas del código básico de la documentación de mapbox.

Hasta ahora hemos utilizado la librería mapboxgl y la API de geo-localización de html5

para agregar una marca a la posición en la cual nos encontramos en este link https://docs.mapbox.com/mapbox-gl-js/api/markers/ encontramos la documentación necesaria.
usaremos el siguiente código para usar una marca basica https://docs.mapbox.com/mapbox-gl-js/api/markers/ 
ojo, que para que los marcadores funciones, debemos incluir la hoja de estilo en nuestro archivo index.html.
 estos se pueden encontrar en: https://docs.mapbox.com/mapbox-gl-js/guides/install/
el código básico para agregar una marca es la siguiente: 
   const marker1 = new mapboxgl.Marker()
        .setLngLat([12.554729, 55.70651])
        .addTo(map);
la idea es que este método este dentro de nuestro otro método iniciarMaps, asi aprovechamos los props.
   const marker = new mapboxgl.Marker()
        .setLngLat([lon,lat])
        .addTo(map);
Con esto ya podremos ver el mapa y la ubicación de donde lo estamos viendo.


-2)para crear un estilo propio segun la documentación, nos hacen crear un 
div, y a este agregarl los style por js, creo que el codgio quedara mas limpio,
si en vez de eso le agrego una clase de estilo y el estilo que quiero lo hago en el global.
en este caso, le pase un icono que cree, altura y anchura 50px y que ocupe todo el espacio.


-1.1)Voy a crear el servicio para consumir mapbox, para esto voy a crear uno con el comando 
---------ionic generate service carpeta_contenedora/nombre_servicio
luego creare dos métodos llamados permisosMapa e iniciarMap. En el primero usaré el objeto
navigator para verificar si se tienen los permisos de usuario. Si los permisos son otorgados, 
accederé a la geolocalización  y llamaré a iniciarmap como collback para iniciar el mapa.



-3)Para buscar los restaurantes, el endpoint de ejemplo que nos entregan en la documentación oficial de mapboxgls
seria https://docs.mapbox.com/api/search/geocoding-v5/#point-accuracy-for-address-features
donde debemos cambiar las cordenadas, por las cordenas que obtenemos con el objeto navigate.
 creamos una funcion asincrona para luego de cargar el mapa y recibir los datos que se marquen los restaaurantes cercanos